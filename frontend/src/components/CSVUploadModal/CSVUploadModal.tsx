import { useState } from 'react'

import { inventoryApi } from '@/api'
import { parseCSVPreview } from '@/data-layer'
import { Alert, Button, Modal } from '@/shared'

import './CSVUploadModal.css'

interface CSVUploadModalProps {
	isOpen: boolean
	onClose: () => void
	onSuccess: () => void
}

export const CSVUploadModal = ({ isOpen, onClose, onSuccess }: CSVUploadModalProps) => {
	const [file, setFile] = useState<File | null>(null)
	const [preview, setPreview] = useState<string[][] | null>(null)
	const [uploading, setUploading] = useState(false)
	const [error, setError] = useState<string | null>(null)
	const [success, setSuccess] = useState<string | null>(null)

	const handleFileChange = (selectedFile: File | null) => {
		if (!selectedFile) return

		setFile(selectedFile)
		setError(null)

		const reader = new FileReader()
		reader.onload = (e) => {
			const text = e.target?.result as string
			const previewData = parseCSVPreview(text, ';')
			setPreview(previewData)
		}
		reader.readAsText(selectedFile, 'UTF-8')
	}

	const handleDrop = (e: React.DragEvent) => {
		e.preventDefault()
		const droppedFile = e.dataTransfer.files[0]
		if (droppedFile && droppedFile.type === 'text/csv') {
			handleFileChange(droppedFile)
		} else {
			setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ CSV')
		}
	}

	const handleUpload = async () => {
		if (!file) return

		setUploading(true)
		setError(null)

		try {
			const result = await inventoryApi.uploadCSV(file)
			setSuccess(`–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${result.success} –∑–∞–ø–∏—Å–µ–π. –û—à–∏–±–æ–∫: ${result.failed}`)
			setTimeout(() => {
				onSuccess()
				handleClose()
			}, 2000)
		} catch (err) {
			setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞')
		} finally {
			setUploading(false)
		}
	}

	const handleClose = () => {
		setFile(null)
		setPreview(null)
		setError(null)
		setSuccess(null)
		onClose()
	}

	return (
		<Modal
			isOpen={isOpen}
			onClose={handleClose}
			title="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏"
			footer={
				<>
					<Button variant="secondary" onClick={handleClose} disabled={uploading}>
						–û—Ç–º–µ–Ω–∞
					</Button>
					<Button variant="primary" onClick={handleUpload} disabled={!file || uploading} loading={uploading}>
						–ó–∞–≥—Ä—É–∑–∏—Ç—å
					</Button>
				</>
			}
		>
			<div className="csv-upload-content">
				{error && <Alert type="error" message={error} onClose={() => setError(null)} />}
				{success && <Alert type="success" message={success} />}

				<div className="csv-drop-zone" onDrop={handleDrop} onDragOver={(e) => e.preventDefault()}>
					<div className="drop-zone-icon">üìÅ</div>
					<p className="drop-zone-text">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ CSV —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</p>
					<input type="file" accept=".csv" onChange={(e) => handleFileChange(e.target.files?.[0] || null)} className="file-input" />
				</div>

				<div className="csv-requirements">
					<p className="requirements-title">–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É:</p>
					<ul>
						<li>–§–æ—Ä–º–∞—Ç: CSV —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ";"</li>
						<li>–ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8</li>
						<li>–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: product_id, product_name, quantity, zone, date</li>
					</ul>
				</div>

				{file && <div className="selected-file">–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {file.name}</div>}

				{preview && (
					<div className="csv-preview">
						<p className="preview-title">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫):</p>
						<div className="preview-table-container">
							<table className="preview-table">
								<tbody>
									{preview.map((row, idx) => (
										<tr key={idx}>
											{row.map((cell, cellIdx) => (
												<td key={cellIdx}>{cell}</td>
											))}
										</tr>
									))}
								</tbody>
							</table>
						</div>
					</div>
				)}
			</div>
		</Modal>
	)
}

